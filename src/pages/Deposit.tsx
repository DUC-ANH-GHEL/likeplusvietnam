import React, { useState, useEffect } from 'react';
import { Helmet } from 'react-helmet-async';
import paymentService, { PaymentMethod, DepositData } from '../services/paymentService';
import { 
  CreditCardIcon,
  BanknotesIcon,
  CurrencyDollarIcon,
  CheckCircleIcon,
  ExclamationTriangleIcon,
  InformationCircleIcon,
  ArrowRightIcon,
  SparklesIcon,
  ShieldCheckIcon,
  ClockIcon,
  QrCodeIcon,
  CameraIcon
} from '@heroicons/react/24/outline';
import { useToast } from '../components/ToastContext';

const Deposit: React.FC = () => {
  const [paymentMethods, setPaymentMethods] = useState<PaymentMethod[]>([]);
  const [selectedMethod, setSelectedMethod] = useState<string>('');
  const [amount, setAmount] = useState<number>(0);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [showQR, setShowQR] = useState(false);
  const [qrData, setQrData] = useState<string>('');
  const toast = useToast();

  useEffect(() => {
    fetchPaymentMethods();
  }, []);

  const fetchPaymentMethods = async () => {
    try {
      const methods = await paymentService.getPaymentMethods();
      setPaymentMethods(methods);
      if (methods.length > 0) {
        setSelectedMethod(methods[0].id);
      }
    } catch (err) {
      toast.toast('Kh√¥ng th·ªÉ t·∫£i ph∆∞∆°ng th·ª©c thanh to√°n.', 'error');
      console.error('Error fetching payment methods:', err);
    }
  };

  const handleDeposit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!selectedMethod || amount <= 0) {
      toast.toast('Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n v√† nh·∫≠p s·ªë ti·ªÅn h·ª£p l·ªá.', 'error');
      return;
    }

    try {
      setLoading(true);
      
      const depositData: DepositData = {
        amount: amount,
        payment_method: selectedMethod as any
      };

      const result = await paymentService.createDeposit(depositData);
      
      if (result.payment_url) {
        // Redirect to payment gateway
        window.location.href = result.payment_url;
      } else {
        toast.toast('Y√™u c·∫ßu n·∫°p ti·ªÅn ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.', 'success');
      }
    } catch (err: any) {
      const msg = err.response?.data?.message || err.message || 'C√≥ l·ªói x·∫£y ra khi t·∫°o y√™u c·∫ßu n·∫°p ti·ªÅn.';
      toast.toast(msg, 'error');
      console.error('Error creating deposit:', err);
    } finally {
      setLoading(false);
    }
  };

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(price);
  };

  const getMethodIcon = (methodId: string) => {
    const icons: { [key: string]: string } = {
      momo: 'üíú',
      zalo: 'üíô',
      bank_transfer: 'üè¶',
      vnpay: 'üí≥'
    };
    return icons[methodId] || 'üí∞';
  };

  const getMethodColor = (methodId: string) => {
    const colors: { [key: string]: string } = {
      momo: 'from-purple-500 to-pink-500',
      zalo: 'from-blue-500 to-cyan-500',
      bank_transfer: 'from-green-500 to-emerald-500',
      vnpay: 'from-blue-600 to-indigo-600'
    };
    return colors[methodId] || 'from-gray-500 to-gray-600';
  };

  const quickAmounts = [50000, 100000, 200000, 500000, 1000000];

  // T·∫°o QR code data d·ª±a tr√™n ph∆∞∆°ng th·ª©c v√† s·ªë ti·ªÅn
  const generateQRData = (methodId: string, amount: number) => {
    const baseData = {
      amount: amount,
      method: methodId,
      timestamp: Date.now(),
      merchant: 'LikePlusVietNam'
    };

    switch (methodId) {
      case 'momo':
        return `momo://transfer?phone=0123456789&amount=${amount}&content=Nap tien LikePlusVietNam`;
      case 'zalo':
        return `zalo://transfer?phone=0123456789&amount=${amount}&message=Nap tien LikePlusVietNam`;
      case 'vnpay':
        return `https://vnpay.vn/payment?amount=${amount}&merchant=LikePlusVietNam&orderId=${Date.now()}`;
      case 'bank_transfer':
        return `bank://transfer?account=123456789&amount=${amount}&content=Nap tien LikePlusVietNam`;
      default:
        return JSON.stringify(baseData);
    }
  };

  // C·∫≠p nh·∫≠t QR khi thay ƒë·ªïi ph∆∞∆°ng th·ª©c ho·∫∑c s·ªë ti·ªÅn
  useEffect(() => {
    if (selectedMethod && amount > 0) {
      const qrDataString = generateQRData(selectedMethod, amount);
      setQrData(qrDataString);
      setShowQR(true);
    } else {
      setShowQR(false);
    }
  }, [selectedMethod, amount]);

  // T·∫°o QR code URL t·ª´ data
  const getQRCodeURL = (data: string) => {
    return `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(data)}`;
  };

  return (
    <>
      <Helmet>
        <title>N·∫°p ti·ªÅn - LikePlusVietNam</title>
        <meta name="description" content="N·∫°p ti·ªÅn v√†o t√†i kho·∫£n ƒë·ªÉ s·ª≠ d·ª•ng d·ªãch v·ª• tƒÉng like, follow, view, sub." />
      </Helmet>

      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="text-center mb-12">
          <div className="inline-flex items-center space-x-2 bg-green-50 text-green-700 rounded-full px-4 py-2 mb-4">
            <SparklesIcon className="w-5 h-5" />
            <span className="text-sm font-medium">N·∫°p ti·ªÅn nhanh ch√≥ng & an to√†n</span>
          </div>
          <h1 className="text-4xl lg:text-5xl font-bold text-gray-900 mb-4">
            N·∫°p Ti·ªÅn V√†o T√†i Kho·∫£n
          </h1>
          <p className="text-xl text-gray-600 max-w-2xl mx-auto">
            Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n ph√π h·ª£p v√† n·∫°p ti·ªÅn ƒë·ªÉ s·ª≠ d·ª•ng c√°c d·ªãch v·ª• ch·∫•t l∆∞·ª£ng c·ªßa ch√∫ng t√¥i
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Form Section */}
          <div className="bg-white rounded-2xl shadow-lg border border-gray-200 p-8">
            <form onSubmit={handleDeposit} className="space-y-6">
              {/* S·ªë ti·ªÅn */}
              <div>
                <label className="block text-lg font-semibold text-gray-900 mb-4">
                  <CurrencyDollarIcon className="w-6 h-6 inline mr-2 text-green-600" />
                  S·ªë ti·ªÅn n·∫°p (VND)
                </label>
                
                {/* Quick Amount Buttons */}
                <div className="grid grid-cols-2 md:grid-cols-3 gap-3 mb-4">
                  {quickAmounts.map((quickAmount) => (
                    <button
                      key={quickAmount}
                      type="button"
                      onClick={() => setAmount(quickAmount)}
                      className={`p-3 rounded-xl border-2 font-medium transition-all duration-200 ${
                        amount === quickAmount
                          ? 'border-blue-500 bg-blue-50 text-blue-700'
                          : 'border-gray-200 hover:border-gray-300 text-gray-700 hover:bg-gray-50'
                      }`}
                    >
                      {formatPrice(quickAmount)}
                    </button>
                  ))}
                </div>

                <input
                  type="number"
                  value={amount}
                  onChange={(e) => setAmount(parseInt(e.target.value) || 0)}
                  min="10000"
                  step="1000"
                  className="w-full border-2 border-gray-300 rounded-xl px-6 py-4 text-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                  placeholder="Nh·∫≠p s·ªë ti·ªÅn mu·ªën n·∫°p"
                  required
                />
                <p className="text-sm text-gray-500 mt-2 flex items-center">
                  <InformationCircleIcon className="w-4 h-4 mr-1" />
                  S·ªë ti·ªÅn t·ªëi thi·ªÉu: 10,000 VND
                </p>
              </div>

              {/* Ph∆∞∆°ng th·ª©c thanh to√°n */}
              <div>
                <label className="block text-lg font-semibold text-gray-900 mb-4">
                  <CreditCardIcon className="w-6 h-6 inline mr-2 text-blue-600" />
                  Ph∆∞∆°ng th·ª©c thanh to√°n
                </label>
                <div className="space-y-3">
                  {paymentMethods.map((method) => (
                    <div
                      key={method.id}
                      className={`border-2 rounded-xl p-4 cursor-pointer transition-all duration-200 ${
                        selectedMethod === method.id
                          ? 'border-blue-500 bg-blue-50 shadow-lg'
                          : 'border-gray-200 hover:border-gray-300 hover:shadow-md'
                      }`}
                      onClick={() => setSelectedMethod(method.id)}
                    >
                      <div className="flex items-center space-x-4">
                        <div className={`w-12 h-12 bg-gradient-to-r ${getMethodColor(method.id)} rounded-xl flex items-center justify-center text-white text-xl`}>
                          {getMethodIcon(method.id)}
                        </div>
                        <div className="flex-1">
                          <div className="font-semibold text-gray-900">{method.name}</div>
                          <div className="text-sm text-gray-600">{method.description}</div>
                        </div>
                        {selectedMethod === method.id && (
                          <CheckCircleIcon className="w-6 h-6 text-blue-600" />
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Submit button */}
              <button
                type="submit"
                disabled={loading || !selectedMethod || amount <= 0}
                className="w-full bg-gradient-to-r from-blue-600 to-purple-600 text-white py-4 px-6 rounded-xl hover:from-blue-700 hover:to-purple-700 disabled:from-gray-400 disabled:to-gray-500 disabled:cursor-not-allowed transition-all duration-300 font-semibold text-lg flex items-center justify-center space-x-2 shadow-lg hover:shadow-xl"
              >
                {loading ? (
                  <>
                    <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                    <span>ƒêang x·ª≠ l√Ω...</span>
                  </>
                ) : (
                  <>
                    <BanknotesIcon className="w-6 h-6" />
                    <span>N·∫°p ti·ªÅn ngay</span>
                    <ArrowRightIcon className="w-5 h-5" />
                  </>
                )}
              </button>
            </form>
          </div>

          {/* Summary Section */}
          <div className="space-y-6">
            {/* QR Code Section */}
            {showQR && (
              <div className="bg-white rounded-2xl shadow-lg border border-gray-200 p-6">
                <h3 className="text-xl font-bold text-gray-900 mb-4 flex items-center">
                  <QrCodeIcon className="w-6 h-6 mr-2 text-blue-600" />
                  M√£ QR Thanh To√°n
                </h3>
                <div className="text-center">
                  <div className="bg-gradient-to-br from-blue-50 to-indigo-50 rounded-xl p-6 mb-4 border border-blue-200">
                    <img 
                      src={getQRCodeURL(qrData)} 
                      alt="QR Code" 
                      className="mx-auto border-2 border-white rounded-lg shadow-lg"
                    />
                  </div>
                  <div className="space-y-3">
                    <div className="bg-blue-50 rounded-lg p-3">
                      <p className="text-sm font-medium text-blue-800">
                        Qu√©t m√£ QR b·∫±ng ·ª©ng d·ª•ng {selectedMethod === 'momo' ? 'MoMo' : 
                                                 selectedMethod === 'zalo' ? 'ZaloPay' : 
                                                 selectedMethod === 'vnpay' ? 'VNPay' : 'ng√¢n h√†ng'}
                      </p>
                    </div>
                    <div className="flex items-center justify-center space-x-2 text-sm text-gray-500">
                      <CameraIcon className="w-4 h-4" />
                      <span>Ho·∫∑c ch·ª•p ·∫£nh m√†n h√¨nh ƒë·ªÉ thanh to√°n sau</span>
                    </div>
                    <div className="text-xs text-gray-400">
                      M√£ QR s·∫Ω t·ª± ƒë·ªông c·∫≠p nh·∫≠t khi thay ƒë·ªïi s·ªë ti·ªÅn ho·∫∑c ph∆∞∆°ng th·ª©c
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Th√¥ng tin ph√≠ */}
            {selectedMethod && amount > 0 && (
              <div className="bg-white rounded-2xl shadow-lg border border-gray-200 p-6">
                <h3 className="text-xl font-bold text-gray-900 mb-4 flex items-center">
                  <CurrencyDollarIcon className="w-6 h-6 mr-2 text-green-600" />
                  Th√¥ng tin giao d·ªãch
                </h3>
                <div className="space-y-3">
                  <div className="flex justify-between items-center py-2 border-b border-gray-100">
                    <span className="text-gray-600">S·ªë ti·ªÅn n·∫°p:</span>
                    <span className="font-semibold text-gray-900">{formatPrice(amount)}</span>
                  </div>
                  <div className="flex justify-between items-center py-2 border-b border-gray-100">
                    <span className="text-gray-600">Ph√≠ giao d·ªãch:</span>
                    <span className="text-orange-600">{formatPrice(amount * 0.01)} (1%)</span>
                  </div>
                  <div className="flex justify-between items-center py-3 bg-green-50 rounded-lg px-3">
                    <span className="font-bold text-gray-900">T·ªïng c·ªông:</span>
                    <span className="font-bold text-green-600 text-lg">{formatPrice(amount * 1.01)}</span>
                  </div>
                </div>
              </div>
            )}

            {/* H∆∞·ªõng d·∫´n */}
            <div className="bg-gradient-to-br from-blue-50 to-indigo-50 rounded-2xl p-6 border border-blue-200">
              <h3 className="text-xl font-bold text-gray-900 mb-4 flex items-center">
                <InformationCircleIcon className="w-6 h-6 mr-2 text-blue-600" />
                H∆∞·ªõng d·∫´n n·∫°p ti·ªÅn
              </h3>
              <div className="space-y-3 text-sm text-gray-700">
                <div className="flex items-start space-x-3">
                  <div className="w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-xs font-bold mt-0.5">1</div>
                  <p>Ch·ªçn s·ªë ti·ªÅn mu·ªën n·∫°p v√† ph∆∞∆°ng th·ª©c thanh to√°n ph√π h·ª£p</p>
                </div>
                <div className="flex items-start space-x-3">
                  <div className="w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-xs font-bold mt-0.5">2</div>
                  <p>M√£ QR s·∫Ω hi·ªÉn th·ªã t·ª± ƒë·ªông - qu√©t b·∫±ng ·ª©ng d·ª•ng t∆∞∆°ng ·ª©ng</p>
                </div>
                <div className="flex items-start space-x-3">
                  <div className="w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-xs font-bold mt-0.5">3</div>
                  <p>Ho·∫∑c nh·∫•n "N·∫°p ti·ªÅn ngay" ƒë·ªÉ chuy·ªÉn ƒë·∫øn c·ªïng thanh to√°n</p>
                </div>
                <div className="flex items-start space-x-3">
                  <div className="w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-xs font-bold mt-0.5">4</div>
                  <p>S·ªë ti·ªÅn s·∫Ω ƒë∆∞·ª£c c·ªông v√†o t√†i kho·∫£n trong v√≤ng 5-10 ph√∫t</p>
                </div>
              </div>
            </div>

            {/* L∆∞u √Ω */}
            <div className="bg-yellow-50 border border-yellow-200 rounded-2xl p-6">
              <h3 className="text-lg font-bold text-yellow-800 mb-3 flex items-center">
                <ExclamationTriangleIcon className="w-5 h-5 mr-2" />
                L∆∞u √Ω quan tr·ªçng
              </h3>
              <ul className="text-sm text-yellow-700 space-y-2">
                <li className="flex items-start space-x-2">
                  <ShieldCheckIcon className="w-4 h-4 mt-0.5 flex-shrink-0" />
                  <span>Vui l√≤ng gi·ªØ l·∫°i m√£ giao d·ªãch ƒë·ªÉ tra c·ª©u khi c·∫ßn thi·∫øt</span>
                </li>
                <li className="flex items-start space-x-2">
                  <ClockIcon className="w-4 h-4 mt-0.5 flex-shrink-0" />
                  <span>Giao d·ªãch s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω trong v√≤ng 5-10 ph√∫t</span>
                </li>
                <li className="flex items-start space-x-2">
                  <InformationCircleIcon className="w-4 h-4 mt-0.5 flex-shrink-0" />
                  <span>N·∫øu c√≥ v·∫•n ƒë·ªÅ, vui l√≤ng li√™n h·ªá h·ªó tr·ª£ qua email ho·∫∑c hotline</span>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default Deposit; 